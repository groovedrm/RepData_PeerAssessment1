swirl
swirl()
swirl::play()
swirl::info()
swirl::main()
library(swirl)
swirl()
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins','twins')
xor(5 == 6, !FALSE)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z,555,z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = z/my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3) + c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
list.files()
file.exists('mytest.R')
file.info('mytest.R')
args(file.rename)
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
file.path('mytest3.R')
args(file.path)
file.path('folder1','folder2')
?dir.create
dir.create('testdir2')
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
old.dir
setwd(old.dir)
1:20
pi:10
15:1
':'
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
0
swirl::play()
swirl()
x<-1:4
lapply(x, runif, min=0, max=10)
lapply(x, runif)
lapply(x, runif, min=0, max=20)
lapply(x, runif, min=1, max=5)
library(swirl)
swirl()
swirl()
install_course(lapply_and_sapply)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list
)
as.character(cls_list)
cls_vect <- sappy(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$populationm, flags$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(3)
makeVector(3)
makeVector(1)
?solve
a=1
b=1
f<-function(x) {a*x+b}
f(3)
g<-function(x) {}
g<-function(x) {}
source("cachematrix.R")
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
p <- rbing(c(1, -10), c(-10, 1))
p <- rbind(c(1, -10), c(-10, 1))
p
t = makeCacheMatrix(p)
t
t$get()
cacheSolve(t)
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
p <- rbind(c(1, -10), c(-10, 1))
t = makeCacheMatrix(p)
t
cacheSolve(t)
t$get()
cacheSolve(t)
p2 <= rbind(c(2,3), c(20,30))
p2 <- rbind(c(2,3), c(20,30))
p2
t2 = makeCacheMatrix(p2)
t2$get()
cacheSolve(t2)
cacheSolve(t2)
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
p3 = rbind(c(10,1),c(1,10))
p3
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m = makeCacheMatrix(x)
m$get
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
x
m = makeCacheMatrix(x)
m
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
source('~/Development/r/ProgrammingAssignment2/cachematrix.R')
swirl
swirl()
swirl::main()
library(xlsx)
install.packages("RMySQL")
library("RMySQL")
uscsdb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(uscsdb, "show databases;")
result
dbDisconnect(ucscdb)
dbDisconnect(uscsdb)
source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite(rhdf5)
biocLite("rhdf5")
library(rhdf5)
created = h5createfile("example.h5")
created <- h5createFile("example.h5")
created
library(swirl)
swirl()
swirl()
swirl()
swirl()
swirl()
swirl
library(swirl)
swirl()
?InstallCourses
install_course_url(https://github.com/swirldev/swirl_courses/tree/master/Getting_and_Cleaning_Data/Dates_and_Times_with_lubridate)
install_course_url("https://github.com/swirldev/swirl_courses/tree/master/Getting_and_Cleaning_Data/Dates_and_Times_with_lubridate")
install_course_github("seankross","Dates_and_Times_with_lubridate")
install_course_github("seankross","Dates_and_Times_with_lubridate")
install_course("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year()
month()
lubridate::year()
year(2017)
x <- as.POSIXct("2012-03-26 23:12:13", tz = "Etc/GMT+8")
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = h(now()), minutes = m(now()))
update(this_moment)
now()
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("devtools")
devtools::install_github(repo = "dadrivr/FantasyFootballAnalyticsR",  subdir = "R Package/ffanalytics")
unlink('Development/r/RepData_PeerAssessment1/PA1_template_cache', recursive = TRUE)
?print
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Development/r/RepData_PeerAssessment1/final_engine.R')
source('~/Development/r/RepData_PeerAssessment1/final_engine.R')
